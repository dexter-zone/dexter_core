{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This structure describes the parameters used for creating a contract.",
  "type": "object",
  "required": [
    "owner",
    "start_block",
    "tokens_per_block",
    "unbonding_period",
    "vault"
  ],
  "properties": {
    "dex_token": {
      "description": "DEX token contract address",
      "type": [
        "string",
        "null"
      ]
    },
    "owner": {
      "description": "Address that can change contract settings",
      "type": "string"
    },
    "start_block": {
      "description": "Start block for distributing DEX",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "tokens_per_block": {
      "description": "Amount of DEX distributed per block among all pairs",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "unbonding_period": {
      "description": "Number of seconds to wait before a user can withdraw his LP tokens once they are in unbonding phase",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "vault": {
      "description": "Address of vault contract",
      "type": "string"
    }
  },
  "definitions": {
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
