{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Set a new amount of DEX tokens to distribute per block ## Executor - Only the owner can execute this.",
      "type": "object",
      "required": [
        "set_tokens_per_block"
      ],
      "properties": {
        "set_tokens_per_block": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "description": "The new amount of DEX to distro per block",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Failitates updating some of the configuration param of the Dexter Generator Contract ## Executor -  Only the owner can execute it.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "checkpoint_generator_limit": {
              "description": "Max numbrt of generators which can be supported by the contract",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "guardian": {
              "description": "The new generator guardian",
              "type": [
                "string",
                "null"
              ]
            },
            "unbonding_period": {
              "description": "Number of seconds to wait before a user can withdraw his LP tokens after unbonding. Doesn't update period for existing unbonding positions",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "vesting_contract": {
              "description": "The new vesting contract address",
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Setup generators with their respective allocation points. ## Executor - Only the owner can execute this.",
      "type": "object",
      "required": [
        "setup_pools"
      ],
      "properties": {
        "setup_pools": {
          "type": "object",
          "required": [
            "pools"
          ],
          "properties": {
            "pools": {
              "description": "The list of pools with allocation point.",
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "string"
                  },
                  {
                    "$ref": "#/definitions/Uint128"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allowed reward proxy contracts that can interact with the Generator ## Executor - Only the owner can execute this.",
      "type": "object",
      "required": [
        "set_allowed_reward_proxies"
      ],
      "properties": {
        "set_allowed_reward_proxies": {
          "type": "object",
          "required": [
            "proxies"
          ],
          "properties": {
            "proxies": {
              "description": "The full list of allowed proxy contracts",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sends orphan proxy rewards (which were left behind after emergency withdrawals) to another address ## Executor - Only the owner can execute this.",
      "type": "object",
      "required": [
        "send_orphan_proxy_reward"
      ],
      "properties": {
        "send_orphan_proxy_reward": {
          "type": "object",
          "required": [
            "lp_token",
            "recipient"
          ],
          "properties": {
            "lp_token": {
              "description": "The address of the LP token contract for which we send orphaned rewards",
              "type": "string"
            },
            "recipient": {
              "description": "The transfer recipient",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add or remove a proxy contract that can interact with the Generator ## Executor - Only the owner can execute this.",
      "type": "object",
      "required": [
        "update_allowed_proxies"
      ],
      "properties": {
        "update_allowed_proxies": {
          "type": "object",
          "properties": {
            "add": {
              "description": "Allowed proxy contract",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            },
            "remove": {
              "description": "Proxy contracts to remove",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Sets the allocation point to zero for the specified pool ## Executor -  Only the current owner  can execute this",
      "type": "object",
      "required": [
        "deactivate_pool"
      ],
      "properties": {
        "deactivate_pool": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update rewards and transfer them to user. ## Executor - Open for users",
      "type": "object",
      "required": [
        "claim_rewards"
      ],
      "properties": {
        "claim_rewards": {
          "type": "object",
          "required": [
            "lp_tokens"
          ],
          "properties": {
            "lp_tokens": {
              "description": "the LP token contract address",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unstake LP tokens from the Generator. LP tokens need to be unbonded for a period of time before they can be withdrawn. ## Executor - Open for users",
      "type": "object",
      "required": [
        "unstake"
      ],
      "properties": {
        "unstake": {
          "type": "object",
          "required": [
            "amount",
            "lp_token"
          ],
          "properties": {
            "amount": {
              "description": "The amount to withdraw",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "lp_token": {
              "description": "The address of the LP token to withdraw",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unstake LP tokens from the Generator without withdrawing outstanding rewards.  LP tokens need to be unbonded for a period of time before they can be withdrawn. ## Executor - Open for users",
      "type": "object",
      "required": [
        "emergency_unstake"
      ],
      "properties": {
        "emergency_unstake": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "description": "The address of the LP token to withdraw",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unlock and withdraw LP tokens from the Generator ## Executor - Open for users",
      "type": "object",
      "required": [
        "unlock"
      ],
      "properties": {
        "unlock": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "description": "The address of the LP token to withdraw",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Receives a message of type [`Cw20ReceiveMsg`]",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Creates a request to change contract ownership ## Executor -  Only the current owner can execute this.",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "description": "The validity period of the proposal to change the contract owner",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "description": "The newly proposed owner",
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes a request to change contract ownership ## Executor -  Only the current owner can execute this",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claims contract ownership ## Executor - Only the newly proposed owner can execute this",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
