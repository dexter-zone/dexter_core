{
  "contract_name": "dexter-vault",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "This struct describes the Msg used to instantiate in this contract.",
    "type": "object",
    "required": [
      "auto_stake_impl",
      "owner",
      "pool_configs",
      "pool_creation_fee"
    ],
    "properties": {
      "auto_stake_impl": {
        "description": "Specifies which auto-stake implementation has to be used.",
        "allOf": [
          {
            "$ref": "#/definitions/AutoStakeImpl"
          }
        ]
      },
      "fee_collector": {
        "type": [
          "string",
          "null"
        ]
      },
      "lp_token_code_id": {
        "description": "This ID is optional but mandatory to create any pool. It is kept optional during instantiation to allow for the case where the contract is instantiated without any LP token contract and then later on, the LP token contract is stored in the contract's state and then used to create pools",
        "type": [
          "integer",
          "null"
        ],
        "format": "uint64",
        "minimum": 0.0
      },
      "owner": {
        "type": "string"
      },
      "pool_configs": {
        "description": "IDs and configs of contracts that are allowed to instantiate pools",
        "type": "array",
        "items": {
          "$ref": "#/definitions/PoolTypeConfig"
        }
      },
      "pool_creation_fee": {
        "$ref": "#/definitions/PoolCreationFee"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AllowPoolInstantiation": {
        "type": "string",
        "enum": [
          "everyone",
          "only_whitelisted_addresses",
          "nobody"
        ]
      },
      "Asset": {
        "title": "Description - This enum describes a asset (native or CW20).",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "A token amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Information about an asset stored in a [`AssetInfo`] struct",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "This enum describes available Token types.",
        "oneOf": [
          {
            "description": "Non-native Token",
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native token",
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AutoStakeImpl": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "type": "object",
            "required": [
              "multistaking"
            ],
            "properties": {
              "multistaking": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "FeeInfo": {
        "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
        "type": "object",
        "required": [
          "protocol_fee_percent",
          "total_fee_bps"
        ],
        "properties": {
          "protocol_fee_percent": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "total_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "PauseInfo": {
        "type": "object",
        "required": [
          "deposit",
          "imbalanced_withdraw",
          "swap"
        ],
        "properties": {
          "deposit": {
            "description": "True if deposits are paused",
            "type": "boolean"
          },
          "imbalanced_withdraw": {
            "type": "boolean"
          },
          "swap": {
            "description": "True if swaps are paused",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PoolCreationFee": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "disabled"
            ]
          },
          {
            "type": "object",
            "required": [
              "enabled"
            ],
            "properties": {
              "enabled": {
                "type": "object",
                "required": [
                  "fee"
                ],
                "properties": {
                  "fee": {
                    "$ref": "#/definitions/Asset"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolType": {
        "description": "This enum describes the key for the different Pool types supported by Dexter",
        "oneOf": [
          {
            "description": "Stable pool type",
            "type": "object",
            "required": [
              "stable_swap"
            ],
            "properties": {
              "stable_swap": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Weighted pool type",
            "type": "object",
            "required": [
              "weighted"
            ],
            "properties": {
              "weighted": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pool type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolTypeConfig": {
        "description": "This struct stores a pool type's configuration.",
        "type": "object",
        "required": [
          "allow_instantiation",
          "code_id",
          "default_fee_info",
          "paused",
          "pool_type"
        ],
        "properties": {
          "allow_instantiation": {
            "description": "Controls whether the pool can be created by anyone or only by whitelisted addresses (if any) or not at all",
            "allOf": [
              {
                "$ref": "#/definitions/AllowPoolInstantiation"
              }
            ]
          },
          "code_id": {
            "description": "ID of contract which is used to create pools of this type",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "default_fee_info": {
            "$ref": "#/definitions/FeeInfo"
          },
          "paused": {
            "description": "The pause status for this pool type. This overrides the pause status of any pool id of this type.",
            "allOf": [
              {
                "$ref": "#/definitions/PauseInfo"
              }
            ]
          },
          "pool_type": {
            "description": "The pools type (provided in a [`PoolType`])",
            "allOf": [
              {
                "$ref": "#/definitions/PoolType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "This struct describes the functions that can be executed in this contract.",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "receive"
        ],
        "properties": {
          "receive": {
            "$ref": "#/definitions/Cw20ReceiveMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Executable only by `config.owner`. Facilitates updating parameters like `config.fee_collector`, `config.lp_token_code_id`, etc.",
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "auto_stake_impl": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AutoStakeImpl"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "fee_collector": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "lp_token_code_id": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              },
              "paused": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PauseInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "pool_creation_fee": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PoolCreationFee"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "add_address_to_whitelist"
        ],
        "properties": {
          "add_address_to_whitelist": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "remove_address_from_whitelist"
        ],
        "properties": {
          "remove_address_from_whitelist": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Allows updating pause info of pools to whitelisted addresses. Pools can be paused based on a know pool_id or pool_type.",
        "type": "object",
        "required": [
          "update_pause_info"
        ],
        "properties": {
          "update_pause_info": {
            "type": "object",
            "required": [
              "pause_info",
              "update_type"
            ],
            "properties": {
              "pause_info": {
                "$ref": "#/definitions/PauseInfo"
              },
              "update_type": {
                "$ref": "#/definitions/PauseInfoUpdateType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Executable only by `config.owner`. Facilitates enabling / disabling new pool instances creation (`pool_config.is_disabled`) , and updating Fee (` pool_config.fee_info`) for new pool instances",
        "type": "object",
        "required": [
          "update_pool_type_config"
        ],
        "properties": {
          "update_pool_type_config": {
            "type": "object",
            "required": [
              "pool_type"
            ],
            "properties": {
              "allow_instantiation": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/AllowPoolInstantiation"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "new_fee_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FeeInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "paused": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PauseInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Adds a new pool with a new [`PoolType`] Key.",
        "type": "object",
        "required": [
          "add_to_registry"
        ],
        "properties": {
          "add_to_registry": {
            "type": "object",
            "required": [
              "new_pool_type_config"
            ],
            "properties": {
              "new_pool_type_config": {
                "$ref": "#/definitions/PoolTypeConfig"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Creates a new pool with the specified parameters in the `asset_infos` variable.",
        "type": "object",
        "required": [
          "create_pool_instance"
        ],
        "properties": {
          "create_pool_instance": {
            "type": "object",
            "required": [
              "asset_infos",
              "native_asset_precisions",
              "pool_type"
            ],
            "properties": {
              "asset_infos": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AssetInfo"
                }
              },
              "fee_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FeeInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "init_params": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Binary"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "native_asset_precisions": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer",
                      "format": "uint8",
                      "minimum": 0.0
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the pool config for a pool with the specified `pool_id`. This can be used to update the fee, pause info, etc. for a pool.",
        "type": "object",
        "required": [
          "update_pool_config"
        ],
        "properties": {
          "update_pool_config": {
            "type": "object",
            "required": [
              "pool_id"
            ],
            "properties": {
              "fee_info": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/FeeInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "paused": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/PauseInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Updates the pool params for a pool with the specified `pool_id`.",
        "type": "object",
        "required": [
          "update_pool_params"
        ],
        "properties": {
          "update_pool_params": {
            "type": "object",
            "required": [
              "params",
              "pool_id"
            ],
            "properties": {
              "params": {
                "$ref": "#/definitions/Binary"
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "join_pool"
        ],
        "properties": {
          "join_pool": {
            "type": "object",
            "required": [
              "pool_id"
            ],
            "properties": {
              "assets": {
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "$ref": "#/definitions/Asset"
                }
              },
              "auto_stake": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "min_lp_to_receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              },
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "swap"
        ],
        "properties": {
          "swap": {
            "type": "object",
            "required": [
              "swap_request"
            ],
            "properties": {
              "max_spend": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "min_receive": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "recipient": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "swap_request": {
                "$ref": "#/definitions/SingleSwapRequest"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "ProposeNewOwner creates an offer for a new owner. The validity period of the offer is set in the `expires_in` variable.",
        "type": "object",
        "required": [
          "propose_new_owner"
        ],
        "properties": {
          "propose_new_owner": {
            "type": "object",
            "required": [
              "expires_in",
              "new_owner"
            ],
            "properties": {
              "expires_in": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "new_owner": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "DropOwnershipProposal removes the existing offer for the new owner.",
        "type": "object",
        "required": [
          "drop_ownership_proposal"
        ],
        "properties": {
          "drop_ownership_proposal": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Used to claim(approve) new owner proposal, thus changing contract's owner",
        "type": "object",
        "required": [
          "claim_ownership"
        ],
        "properties": {
          "claim_ownership": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "AllowPoolInstantiation": {
        "type": "string",
        "enum": [
          "everyone",
          "only_whitelisted_addresses",
          "nobody"
        ]
      },
      "Asset": {
        "title": "Description - This enum describes a asset (native or CW20).",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "A token amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Information about an asset stored in a [`AssetInfo`] struct",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "This enum describes available Token types.",
        "oneOf": [
          {
            "description": "Non-native Token",
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native token",
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "AutoStakeImpl": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "none"
            ]
          },
          {
            "type": "object",
            "required": [
              "multistaking"
            ],
            "properties": {
              "multistaking": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Cw20ReceiveMsg": {
        "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
        "type": "object",
        "required": [
          "amount",
          "msg",
          "sender"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "sender": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "FeeInfo": {
        "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
        "type": "object",
        "required": [
          "protocol_fee_percent",
          "total_fee_bps"
        ],
        "properties": {
          "protocol_fee_percent": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "total_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "PauseInfo": {
        "type": "object",
        "required": [
          "deposit",
          "imbalanced_withdraw",
          "swap"
        ],
        "properties": {
          "deposit": {
            "description": "True if deposits are paused",
            "type": "boolean"
          },
          "imbalanced_withdraw": {
            "type": "boolean"
          },
          "swap": {
            "description": "True if swaps are paused",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PauseInfoUpdateType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "pool_id"
            ],
            "properties": {
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "pool_type"
            ],
            "properties": {
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolCreationFee": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "disabled"
            ]
          },
          {
            "type": "object",
            "required": [
              "enabled"
            ],
            "properties": {
              "enabled": {
                "type": "object",
                "required": [
                  "fee"
                ],
                "properties": {
                  "fee": {
                    "$ref": "#/definitions/Asset"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolType": {
        "description": "This enum describes the key for the different Pool types supported by Dexter",
        "oneOf": [
          {
            "description": "Stable pool type",
            "type": "object",
            "required": [
              "stable_swap"
            ],
            "properties": {
              "stable_swap": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Weighted pool type",
            "type": "object",
            "required": [
              "weighted"
            ],
            "properties": {
              "weighted": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pool type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PoolTypeConfig": {
        "description": "This struct stores a pool type's configuration.",
        "type": "object",
        "required": [
          "allow_instantiation",
          "code_id",
          "default_fee_info",
          "paused",
          "pool_type"
        ],
        "properties": {
          "allow_instantiation": {
            "description": "Controls whether the pool can be created by anyone or only by whitelisted addresses (if any) or not at all",
            "allOf": [
              {
                "$ref": "#/definitions/AllowPoolInstantiation"
              }
            ]
          },
          "code_id": {
            "description": "ID of contract which is used to create pools of this type",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "default_fee_info": {
            "$ref": "#/definitions/FeeInfo"
          },
          "paused": {
            "description": "The pause status for this pool type. This overrides the pause status of any pool id of this type.",
            "allOf": [
              {
                "$ref": "#/definitions/PauseInfo"
              }
            ]
          },
          "pool_type": {
            "description": "The pools type (provided in a [`PoolType`])",
            "allOf": [
              {
                "$ref": "#/definitions/PoolType"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "SingleSwapRequest": {
        "type": "object",
        "required": [
          "amount",
          "asset_in",
          "asset_out",
          "pool_id",
          "swap_type"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "asset_in": {
            "$ref": "#/definitions/AssetInfo"
          },
          "asset_out": {
            "$ref": "#/definitions/AssetInfo"
          },
          "belief_price": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "max_spread": {
            "anyOf": [
              {
                "$ref": "#/definitions/Decimal"
              },
              {
                "type": "null"
              }
            ]
          },
          "pool_id": {
            "$ref": "#/definitions/Uint128"
          },
          "swap_type": {
            "$ref": "#/definitions/SwapType"
          }
        },
        "additionalProperties": false
      },
      "SwapType": {
        "description": "This enum describes available Swap types.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "give_in"
            ],
            "properties": {
              "give_in": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "give_out"
            ],
            "properties": {
              "give_out": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom swap type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Returns the [`PoolType`]'s Configuration settings  in custom [`PoolConfigResponse`] struct",
    "oneOf": [
      {
        "description": "Config returns controls settings that specified in custom [`ConfigResponse`] struct",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Return PoolConfig",
        "type": "object",
        "required": [
          "query_registry"
        ],
        "properties": {
          "query_registry": {
            "type": "object",
            "required": [
              "pool_type"
            ],
            "properties": {
              "pool_type": {
                "$ref": "#/definitions/PoolType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the current stored state of the Pool in custom [`PoolInfoResponse`] struct",
        "type": "object",
        "required": [
          "get_pool_by_id"
        ],
        "properties": {
          "get_pool_by_id": {
            "type": "object",
            "required": [
              "pool_id"
            ],
            "properties": {
              "pool_id": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the current stored state of the Pool in custom [`PoolInfoResponse`] struct",
        "type": "object",
        "required": [
          "get_pool_by_address"
        ],
        "properties": {
          "get_pool_by_address": {
            "type": "object",
            "required": [
              "pool_addr"
            ],
            "properties": {
              "pool_addr": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "PoolType": {
        "description": "This enum describes the key for the different Pool types supported by Dexter",
        "oneOf": [
          {
            "description": "Stable pool type",
            "type": "object",
            "required": [
              "stable_swap"
            ],
            "properties": {
              "stable_swap": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Weighted pool type",
            "type": "object",
            "required": [
              "weighted"
            ],
            "properties": {
              "weighted": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pool type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Description - This struct describes the main control config of Vault.",
      "type": "object",
      "required": [
        "auto_stake_impl",
        "next_pool_id",
        "owner",
        "paused",
        "pool_creation_fee",
        "whitelisted_addresses"
      ],
      "properties": {
        "auto_stake_impl": {
          "description": "Which auto-stake feature is enabled for the pool Multistaking allows for staking of LP tokens with N-different rewards in a single contract. If none, it will disable auto-staking feature",
          "allOf": [
            {
              "$ref": "#/definitions/AutoStakeImpl"
            }
          ]
        },
        "fee_collector": {
          "description": "The contract address to which protocol fees are sent",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "lp_token_code_id": {
          "description": "The Contract ID that is used for instantiating LP tokens for new pools",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "next_pool_id": {
          "description": "The next pool ID to be used for creating new pools",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "owner": {
          "description": "The admin address that controls settings for factory, pools and tokenomics contracts",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "paused": {
          "description": "The global pause status for the vault. This overrides the pause status of any pool type or pool id.",
          "allOf": [
            {
              "$ref": "#/definitions/PauseInfo"
            }
          ]
        },
        "pool_creation_fee": {
          "description": "Fee required for creating a new pool. Ideally, it is charged in the base currency of the chain but can be changed to governance token later",
          "allOf": [
            {
              "$ref": "#/definitions/PoolCreationFee"
            }
          ]
        },
        "whitelisted_addresses": {
          "description": "Additional allowed addresses to create/manage pools. If empty, only owner can create/manage pools",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "AutoStakeImpl": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "none"
              ]
            },
            {
              "type": "object",
              "required": [
                "multistaking"
              ],
              "properties": {
                "multistaking": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PauseInfo": {
          "type": "object",
          "required": [
            "deposit",
            "imbalanced_withdraw",
            "swap"
          ],
          "properties": {
            "deposit": {
              "description": "True if deposits are paused",
              "type": "boolean"
            },
            "imbalanced_withdraw": {
              "type": "boolean"
            },
            "swap": {
              "description": "True if swaps are paused",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "PoolCreationFee": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "disabled"
              ]
            },
            {
              "type": "object",
              "required": [
                "enabled"
              ],
              "properties": {
                "enabled": {
                  "type": "object",
                  "required": [
                    "fee"
                  ],
                  "properties": {
                    "fee": {
                      "$ref": "#/definitions/Asset"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_pool_by_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolInfo",
      "description": "This struct stores a pool type's configuration.",
      "type": "object",
      "required": [
        "assets",
        "fee_info",
        "lp_token_addr",
        "paused",
        "pool_addr",
        "pool_id",
        "pool_type"
      ],
      "properties": {
        "assets": {
          "description": "Assets and their respective balances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "fee_info": {
          "description": "Fee charged by the pool for swaps",
          "allOf": [
            {
              "$ref": "#/definitions/FeeInfo"
            }
          ]
        },
        "lp_token_addr": {
          "description": "Address of the LP Token Contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "paused": {
          "description": "Pause status for this pool",
          "allOf": [
            {
              "$ref": "#/definitions/PauseInfo"
            }
          ]
        },
        "pool_addr": {
          "description": "Address of the Pool Contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "pool_id": {
          "description": "ID of this pool",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "pool_type": {
          "description": "The pools type (provided in a [`PoolType`])",
          "allOf": [
            {
              "$ref": "#/definitions/PoolType"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FeeInfo": {
          "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
          "type": "object",
          "required": [
            "protocol_fee_percent",
            "total_fee_bps"
          ],
          "properties": {
            "protocol_fee_percent": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "total_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "PauseInfo": {
          "type": "object",
          "required": [
            "deposit",
            "imbalanced_withdraw",
            "swap"
          ],
          "properties": {
            "deposit": {
              "description": "True if deposits are paused",
              "type": "boolean"
            },
            "imbalanced_withdraw": {
              "type": "boolean"
            },
            "swap": {
              "description": "True if swaps are paused",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "PoolType": {
          "description": "This enum describes the key for the different Pool types supported by Dexter",
          "oneOf": [
            {
              "description": "Stable pool type",
              "type": "object",
              "required": [
                "stable_swap"
              ],
              "properties": {
                "stable_swap": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Weighted pool type",
              "type": "object",
              "required": [
                "weighted"
              ],
              "properties": {
                "weighted": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Custom pool type",
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_pool_by_id": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolInfo",
      "description": "This struct stores a pool type's configuration.",
      "type": "object",
      "required": [
        "assets",
        "fee_info",
        "lp_token_addr",
        "paused",
        "pool_addr",
        "pool_id",
        "pool_type"
      ],
      "properties": {
        "assets": {
          "description": "Assets and their respective balances",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "fee_info": {
          "description": "Fee charged by the pool for swaps",
          "allOf": [
            {
              "$ref": "#/definitions/FeeInfo"
            }
          ]
        },
        "lp_token_addr": {
          "description": "Address of the LP Token Contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "paused": {
          "description": "Pause status for this pool",
          "allOf": [
            {
              "$ref": "#/definitions/PauseInfo"
            }
          ]
        },
        "pool_addr": {
          "description": "Address of the Pool Contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "pool_id": {
          "description": "ID of this pool",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "pool_type": {
          "description": "The pools type (provided in a [`PoolType`])",
          "allOf": [
            {
              "$ref": "#/definitions/PoolType"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FeeInfo": {
          "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
          "type": "object",
          "required": [
            "protocol_fee_percent",
            "total_fee_bps"
          ],
          "properties": {
            "protocol_fee_percent": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "total_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "PauseInfo": {
          "type": "object",
          "required": [
            "deposit",
            "imbalanced_withdraw",
            "swap"
          ],
          "properties": {
            "deposit": {
              "description": "True if deposits are paused",
              "type": "boolean"
            },
            "imbalanced_withdraw": {
              "type": "boolean"
            },
            "swap": {
              "description": "True if swaps are paused",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "PoolType": {
          "description": "This enum describes the key for the different Pool types supported by Dexter",
          "oneOf": [
            {
              "description": "Stable pool type",
              "type": "object",
              "required": [
                "stable_swap"
              ],
              "properties": {
                "stable_swap": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Weighted pool type",
              "type": "object",
              "required": [
                "weighted"
              ],
              "properties": {
                "weighted": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Custom pool type",
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "query_registry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_PoolTypeConfig",
      "anyOf": [
        {
          "$ref": "#/definitions/PoolTypeConfig"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "AllowPoolInstantiation": {
          "type": "string",
          "enum": [
            "everyone",
            "only_whitelisted_addresses",
            "nobody"
          ]
        },
        "FeeInfo": {
          "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
          "type": "object",
          "required": [
            "protocol_fee_percent",
            "total_fee_bps"
          ],
          "properties": {
            "protocol_fee_percent": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "total_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "PauseInfo": {
          "type": "object",
          "required": [
            "deposit",
            "imbalanced_withdraw",
            "swap"
          ],
          "properties": {
            "deposit": {
              "description": "True if deposits are paused",
              "type": "boolean"
            },
            "imbalanced_withdraw": {
              "type": "boolean"
            },
            "swap": {
              "description": "True if swaps are paused",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "PoolType": {
          "description": "This enum describes the key for the different Pool types supported by Dexter",
          "oneOf": [
            {
              "description": "Stable pool type",
              "type": "object",
              "required": [
                "stable_swap"
              ],
              "properties": {
                "stable_swap": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Weighted pool type",
              "type": "object",
              "required": [
                "weighted"
              ],
              "properties": {
                "weighted": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Custom pool type",
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolTypeConfig": {
          "description": "This struct stores a pool type's configuration.",
          "type": "object",
          "required": [
            "allow_instantiation",
            "code_id",
            "default_fee_info",
            "paused",
            "pool_type"
          ],
          "properties": {
            "allow_instantiation": {
              "description": "Controls whether the pool can be created by anyone or only by whitelisted addresses (if any) or not at all",
              "allOf": [
                {
                  "$ref": "#/definitions/AllowPoolInstantiation"
                }
              ]
            },
            "code_id": {
              "description": "ID of contract which is used to create pools of this type",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "default_fee_info": {
              "$ref": "#/definitions/FeeInfo"
            },
            "paused": {
              "description": "The pause status for this pool type. This overrides the pause status of any pool id of this type.",
              "allOf": [
                {
                  "$ref": "#/definitions/PauseInfo"
                }
              ]
            },
            "pool_type": {
              "description": "The pools type (provided in a [`PoolType`])",
              "allOf": [
                {
                  "$ref": "#/definitions/PoolType"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
