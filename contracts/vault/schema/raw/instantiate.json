{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "This struct describes the Msg used to instantiate in this contract.",
  "type": "object",
  "required": [
    "auto_stake_impl",
    "owner",
    "pool_configs",
    "pool_creation_fee"
  ],
  "properties": {
    "auto_stake_impl": {
      "description": "Specifies which auto-stake implementation has to be used.",
      "allOf": [
        {
          "$ref": "#/definitions/AutoStakeImpl"
        }
      ]
    },
    "fee_collector": {
      "type": [
        "string",
        "null"
      ]
    },
    "lp_token_code_id": {
      "description": "This ID is optional but mandatory to create any pool. It is kept optional during instantiation to allow for the case where the contract is instantiated without any LP token contract and then later on, the LP token contract is stored in the contract's state and then used to create pools",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "owner": {
      "type": "string"
    },
    "pool_configs": {
      "description": "IDs and configs of contracts that are allowed to instantiate pools",
      "type": "array",
      "items": {
        "$ref": "#/definitions/PoolTypeConfig"
      }
    },
    "pool_creation_fee": {
      "$ref": "#/definitions/PoolCreationFee"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AllowPoolInstantiation": {
      "type": "string",
      "enum": [
        "everyone",
        "only_whitelisted_addresses",
        "nobody"
      ]
    },
    "Asset": {
      "title": "Description - This enum describes a asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types.",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AutoStakeImpl": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "type": "object",
          "required": [
            "multistaking"
          ],
          "properties": {
            "multistaking": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FeeInfo": {
      "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
      "type": "object",
      "required": [
        "protocol_fee_percent",
        "total_fee_bps"
      ],
      "properties": {
        "protocol_fee_percent": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "total_fee_bps": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "PauseInfo": {
      "type": "object",
      "required": [
        "deposit",
        "swap"
      ],
      "properties": {
        "deposit": {
          "description": "True if deposits are paused",
          "type": "boolean"
        },
        "swap": {
          "description": "True if swaps are paused",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "PoolCreationFee": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "disabled"
          ]
        },
        {
          "type": "object",
          "required": [
            "enabled"
          ],
          "properties": {
            "enabled": {
              "type": "object",
              "required": [
                "fee"
              ],
              "properties": {
                "fee": {
                  "$ref": "#/definitions/Asset"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolType": {
      "description": "This enum describes the key for the different Pool types supported by Dexter",
      "oneOf": [
        {
          "description": "Stable pool type",
          "type": "object",
          "required": [
            "stable5_pool"
          ],
          "properties": {
            "stable5_pool": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Weighted pool type",
          "type": "object",
          "required": [
            "weighted"
          ],
          "properties": {
            "weighted": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom pool type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolTypeConfig": {
      "description": "This struct stores a pool type's configuration.",
      "type": "object",
      "required": [
        "allow_instantiation",
        "code_id",
        "default_fee_info",
        "paused",
        "pool_type"
      ],
      "properties": {
        "allow_instantiation": {
          "description": "Controls whether the pool can be created by anyone or only by whitelisted addresses (if any) or not at all",
          "allOf": [
            {
              "$ref": "#/definitions/AllowPoolInstantiation"
            }
          ]
        },
        "code_id": {
          "description": "ID of contract which is used to create pools of this type",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "default_fee_info": {
          "$ref": "#/definitions/FeeInfo"
        },
        "paused": {
          "description": "The pause status for this pool type. This overrides the pause status of any pool id of this type.",
          "allOf": [
            {
              "$ref": "#/definitions/PauseInfo"
            }
          ]
        },
        "pool_type": {
          "description": "The pools type (provided in a [`PoolType`])",
          "allOf": [
            {
              "$ref": "#/definitions/PoolType"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
