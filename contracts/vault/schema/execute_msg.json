{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "UpdateConfig updates updatable Config parameters",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "fee_collector": {
              "type": [
                "string",
                "null"
              ]
            },
            "generator_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "lp_token_code_id": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_pool_config"
      ],
      "properties": {
        "update_pool_config": {
          "type": "object",
          "required": [
            "pool_type"
          ],
          "properties": {
            "is_disabled": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "new_fee_info": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FeeInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "CreatePool instantiates pool contract",
      "type": "object",
      "required": [
        "create_pool"
      ],
      "properties": {
        "create_pool": {
          "type": "object",
          "required": [
            "asset_infos",
            "pool_type"
          ],
          "properties": {
            "asset_infos": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "init_params": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lp_token_name": {
              "type": [
                "string",
                "null"
              ]
            },
            "lp_token_symbol": {
              "type": [
                "string",
                "null"
              ]
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "join_pool"
      ],
      "properties": {
        "join_pool": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "assets": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "auto_stake": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "lp_to_mint": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            },
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "swap_request"
          ],
          "properties": {
            "deadline": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "limit": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "recipient": {
              "type": [
                "string",
                "null"
              ]
            },
            "swap_request": {
              "$ref": "#/definitions/SingleSwapRequest"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "ProposeNewOwner creates an offer for a new owner. The validity period of the offer is set in the `expires_in` variable.",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "DropOwnershipProposal removes the existing offer for the new owner.",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Used to claim(approve) new owner proposal, thus changing contract's owner",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description - This enum describes a asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "description": "This enum describes available Token types.",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "FeeInfo": {
      "type": "object",
      "required": [
        "dev_fee_percent",
        "protocol_fee_percent",
        "total_fee_bps"
      ],
      "properties": {
        "dev_fee_percent": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "developer_addr": {
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "protocol_fee_percent": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "total_fee_bps": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      }
    },
    "PoolType": {
      "description": "This enum describes available Pool types. ## Available pool types ``` Xyk Stable Weighted MetaStable Custom(String::from(\"Custom\")); ```",
      "oneOf": [
        {
          "description": "XYK pool type",
          "type": "object",
          "required": [
            "xyk"
          ],
          "properties": {
            "xyk": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stable pool type",
          "type": "object",
          "required": [
            "stable"
          ],
          "properties": {
            "stable": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Weighted pool type",
          "type": "object",
          "required": [
            "weighted"
          ],
          "properties": {
            "weighted": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Meta-Stable pool type",
          "type": "object",
          "required": [
            "meta_stable"
          ],
          "properties": {
            "meta_stable": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom pool type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SingleSwapRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_in",
        "asset_out",
        "pool_id",
        "swap_type"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "asset_in": {
          "$ref": "#/definitions/AssetInfo"
        },
        "asset_out": {
          "$ref": "#/definitions/AssetInfo"
        },
        "pool_id": {
          "$ref": "#/definitions/Uint128"
        },
        "swap_type": {
          "$ref": "#/definitions/SwapType"
        }
      }
    },
    "SwapType": {
      "description": "This enum describes available Swap types. ## Available swap types ``` GiveIn ::   When we have the number of tokens being provided by the user to the pool in the swap request GiveOut :: When we have the number of tokens to be sent to the user from the pool in the swap request ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "give_in"
          ],
          "properties": {
            "give_in": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "give_out"
          ],
          "properties": {
            "give_out": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom swap type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
