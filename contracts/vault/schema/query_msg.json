{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Config returns controls settings that specified in custom [`ConfigResponse`] structure",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "pool_config"
      ],
      "properties": {
        "pool_config": {
          "type": "object",
          "required": [
            "pool_type"
          ],
          "properties": {
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_pool_by_id"
      ],
      "properties": {
        "get_pool_by_id": {
          "type": "object",
          "required": [
            "pool_id"
          ],
          "properties": {
            "pool_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_pool_by_address"
      ],
      "properties": {
        "get_pool_by_address": {
          "type": "object",
          "required": [
            "pool_addr"
          ],
          "properties": {
            "pool_addr": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "PoolType": {
      "description": "This enum describes available Pool types. ## Available pool types ``` Xyk Stable2Pool Weighted Stable3Pool Custom(String::from(\"Custom\")); ```",
      "oneOf": [
        {
          "description": "XYK pool type",
          "type": "object",
          "required": [
            "xyk"
          ],
          "properties": {
            "xyk": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stable pool type",
          "type": "object",
          "required": [
            "stable2_pool"
          ],
          "properties": {
            "stable2_pool": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Stable pool type",
          "type": "object",
          "required": [
            "stable3_pool"
          ],
          "properties": {
            "stable3_pool": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Weighted pool type",
          "type": "object",
          "required": [
            "weighted"
          ],
          "properties": {
            "weighted": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom pool type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
