{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Allows an admin to update config params",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "minimum_reward_schedule_proposal_start_delay": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "unlock_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Proposes a new reward schedule for rewarding LP token holders a specific asset. Asset is distributed linearly over the duration of the reward schedule. This entry point is strictly meant for proposing reward schedules with native tokens. For proposing reward schedules with CW20 tokens, CW20 transfer with ProposeRewardSchedule HookMsg is used. Anyone can initiate a reward schedule proposal.",
      "type": "object",
      "required": [
        "propose_reward_schedule"
      ],
      "properties": {
        "propose_reward_schedule": {
          "type": "object",
          "required": [
            "end_block_time",
            "lp_token",
            "start_block_time",
            "title"
          ],
          "properties": {
            "description": {
              "type": [
                "string",
                "null"
              ]
            },
            "end_block_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lp_token": {
              "$ref": "#/definitions/Addr"
            },
            "start_block_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Only the multi-staking admin can approve/reject proposed reward schedules.",
      "type": "object",
      "required": [
        "review_reward_schedule_proposals"
      ],
      "properties": {
        "review_reward_schedule_proposals": {
          "type": "object",
          "required": [
            "reviews"
          ],
          "properties": {
            "reviews": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ReviewProposedRewardSchedule"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Only the proposer can drop the proposal. A proposal can be dropped either if its not yet been reviewed or has been rejected by admin. If approved, a proposal can't be dropped.",
      "type": "object",
      "required": [
        "drop_reward_schedule_proposal"
      ],
      "properties": {
        "drop_reward_schedule_proposal": {
          "type": "object",
          "required": [
            "proposal_id"
          ],
          "properties": {
            "proposal_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows an admin to allow a new LP token to be rewarded This is needed to prevent spam related to adding new reward schedules for random LP tokens",
      "type": "object",
      "required": [
        "allow_lp_token"
      ],
      "properties": {
        "allow_lp_token": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": ". Allows an admin to remove an LP token from being rewarded. Existing reward schedules for the LP token will still be valid.",
      "type": "object",
      "required": [
        "remove_lp_token"
      ],
      "properties": {
        "remove_lp_token": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the contract to receive CW20 tokens. The contract can receive CW20 tokens from LP tokens for staking and CW20 assets to be used as rewards.",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows to bond LP tokens to the contract. Bonded tokens are eligible to receive rewards.",
      "type": "object",
      "required": [
        "bond"
      ],
      "properties": {
        "bond": {
          "type": "object",
          "required": [
            "amount",
            "lp_token"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "lp_token": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows to unbond LP tokens from the contract. After unbonding, the tokens are still locked for a locking period. During this period, the tokens are not eligible to receive rewards. After the locking period, the tokens can be withdrawn.",
      "type": "object",
      "required": [
        "unbond"
      ],
      "properties": {
        "unbond": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "lp_token": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Unlocks the tokens which are locked for a locking period. After unlocking, the tokens are withdrawn from the contract and sent to the user.",
      "type": "object",
      "required": [
        "unlock"
      ],
      "properties": {
        "unlock": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows to withdraw unbonded rewards for a specific LP token. The rewards are sent to the user's address.",
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "lp_token"
          ],
          "properties": {
            "lp_token": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows a reward schedule creator to claim back amount that was not allocated to anyone since no token were bonded. This can only be claimed after reward schedule expiry",
      "type": "object",
      "required": [
        "claim_unallocated_reward"
      ],
      "properties": {
        "claim_unallocated_reward": {
          "type": "object",
          "required": [
            "reward_schedule_id"
          ],
          "properties": {
            "reward_schedule_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the owner to transfer ownership to a new address. Ownership transfer is done in two steps: 1. The owner proposes a new owner. 2. The new owner accepts the ownership. The proposal expires after a certain period of time within which the new owner must accept the ownership.",
      "type": "object",
      "required": [
        "propose_new_owner"
      ],
      "properties": {
        "propose_new_owner": {
          "type": "object",
          "required": [
            "expires_in",
            "owner"
          ],
          "properties": {
            "expires_in": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "$ref": "#/definitions/Addr"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the new owner to accept ownership.",
      "type": "object",
      "required": [
        "claim_ownership"
      ],
      "properties": {
        "claim_ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Allows the owner to drop the ownership transfer proposal.",
      "type": "object",
      "required": [
        "drop_ownership_proposal"
      ],
      "properties": {
        "drop_ownership_proposal": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ReviewProposedRewardSchedule": {
      "description": "Review of a proposed reward schedule for a LP token",
      "type": "object",
      "required": [
        "approve",
        "proposal_id"
      ],
      "properties": {
        "approve": {
          "description": "true if approved, false if rejected",
          "type": "boolean"
        },
        "proposal_id": {
          "description": "ID of the proposal to review",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
