{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ProposedRewardSchedule",
  "description": "The proposed reward schedule for a LP token",
  "type": "object",
  "required": [
    "asset",
    "end_block_time",
    "lp_token",
    "proposer",
    "rejected",
    "start_block_time",
    "title"
  ],
  "properties": {
    "asset": {
      "description": "The asset proposed as reward. The asset would go back to the proposer when the proposer drops the proposal.",
      "allOf": [
        {
          "$ref": "#/definitions/Asset"
        }
      ]
    },
    "description": {
      "description": "Any description that the proposer wants to give about the proposal.",
      "type": [
        "string",
        "null"
      ]
    },
    "end_block_time": {
      "description": "Block time when reward schedule ends.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "lp_token": {
      "description": "The LP token for which to propose the reward schedule",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "proposer": {
      "description": "The proposer of the reward schedule",
      "allOf": [
        {
          "$ref": "#/definitions/Addr"
        }
      ]
    },
    "rejected": {
      "description": "True if proposal was rejected, false if proposal hasn't yet been reviewed. Once rejected, a proposal can't be reviewed again. It can only be dropped by the proposer.",
      "type": "boolean"
    },
    "start_block_time": {
      "description": "Block time when the reward schedule will become effective. This must be at least 3 days in future at the time of proposal to give enough time to review. This also acts as the expiry of the proposal. If time has elapsed after the start_block_time, then the proposal can't be approved by the admin. After that, it can only be rejected by the admin, or dropped by the proposer.",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "title": {
      "description": "The title of the proposal.",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description - This enum describes a asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AssetInfo": {
      "description": "This enum describes available Token types.",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
