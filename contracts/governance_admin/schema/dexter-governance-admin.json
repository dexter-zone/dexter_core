{
  "contract_name": "dexter-governance-admin",
  "contract_version": "1.0.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Creates a proposal to create a pool The proposal is created by the governance admin contract on behalf of the user to enable easy accounting of funds for pool creation Pool creation follows the following steps: 1. User calls this contract with a pool creation request and required funds and(or) approval to spend funds in case of CW20 tokens 2. This contract verifies the funds, and transfers the funds to this contract in case of CW20 tokens. The custody of the funds is transferred to the governance admin contract. 3. This contract stores the pool creation request in its state. 3. Then, this contract creates a proposal to resume the pool creation process, which returns a callback to itself with the pool creation request id. 4. If the proposal is passed, governance module of the chain will call the callback with the pool creation request id. 5. This contract will then resume the pool creation process and create the pool in the vault contract. 6. If specified, it will also bootstrap the pool with the bootstrapping amount. 7. If specified, it will also create the reward schedules for the pool in the multi-staking contract. 8. If the pool creation fails or if the proposal is rejected, the user can request all the funds back by executing the `ClaimRefund` message. 9. If the pool creation is successful, the user can request Proposal Deposit amount by the same `ClaimRefund` message.",
        "type": "object",
        "required": [
          "create_pool_creation_proposal"
        ],
        "properties": {
          "create_pool_creation_proposal": {
            "type": "object",
            "required": [
              "pool_creation_request",
              "proposal_description"
            ],
            "properties": {
              "pool_creation_request": {
                "$ref": "#/definitions/PoolCreationRequest"
              },
              "proposal_description": {
                "$ref": "#/definitions/GovernanceProposalDescription"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Creates a proposal to add one or more new reward schedule(s) to an existing pool The proposal is created by the governance admin contract on behalf of the user to enable easy accounting of funds for reward schedule creation Reward schedule creation follows the following steps: 1. User calls this contract with a reward schedule creation request and required funds and(or) approval to spend funds in case of CW20 tokens 2. This contract verifies the funds, and transfers the funds to this contract in case of CW20 tokens. The custody of the funds is transferred to the governance admin contract. 3. This contract stores the reward schedule creation request in its state. 3. Then, this contract creates a proposal to resume the reward schedule creation process, which returns a callback to itself with the reward schedule creation request id. 4. If the proposal is passed, governance module of the chain will call the callback with the reward schedule creation request id. 5. This contract will then resume the reward schedule creation process and create the reward schedule(s) in the multi-staking contract. 8. If the pool creation fails or if the proposal is rejected, the user can request all the funds back by executing the `ClaimRefund` message. 9. If the pool creation is successful, the user can request Proposal Deposit amount by the same `ClaimRefund` message.",
        "type": "object",
        "required": [
          "create_reward_schedules_proposal"
        ],
        "properties": {
          "create_reward_schedules_proposal": {
            "type": "object",
            "required": [
              "multistaking_contract_addr",
              "proposal_description",
              "reward_schedule_creation_requests"
            ],
            "properties": {
              "multistaking_contract_addr": {
                "type": "string"
              },
              "proposal_description": {
                "$ref": "#/definitions/GovernanceProposalDescription"
              },
              "reward_schedule_creation_requests": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RewardScheduleCreationRequest"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claims the refundable funds from the governance admin contract. Will return an error if the valid funds are already refunded to the user.",
        "type": "object",
        "required": [
          "claim_refund"
        ],
        "properties": {
          "claim_refund": {
            "type": "object",
            "required": [
              "request_type"
            ],
            "properties": {
              "request_type": {
                "$ref": "#/definitions/GovAdminProposalRequestType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Execute any messages on behalf of the governance admin contract. This is useful for configuration updates using the Governance Admin contract. As governance admin contract is designed to become owner of Vault and Multi-staking contracts, any configuration change on them can be done using this message This message can be executed only by the Governace module of the chain i.e. it is fully chain governed.",
        "type": "object",
        "required": [
          "execute_msgs"
        ],
        "properties": {
          "execute_msgs": {
            "type": "object",
            "required": [
              "msgs"
            ],
            "properties": {
              "msgs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CosmosMsg_for_Empty"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Resumes the pool creation process after the proposal is passed. This message is called by the governance module of the chain as an action of the proposal created by the `CreatePoolCreationProposal` message. This message can only be called by the governance module of the chain.",
        "type": "object",
        "required": [
          "resume_create_pool"
        ],
        "properties": {
          "resume_create_pool": {
            "type": "object",
            "required": [
              "pool_creation_request_id"
            ],
            "properties": {
              "pool_creation_request_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Resumes the reward schedule creation process. This message is called by the governance module of the chain as an action of the proposal created by the `CreateRewardSchedulesProposal` message. This message can also be called by the contract itself after a new pool with reward schedules is created using the `ResumeCreatePool` message.",
        "type": "object",
        "required": [
          "resume_create_reward_schedules"
        ],
        "properties": {
          "resume_create_reward_schedules": {
            "type": "object",
            "required": [
              "reward_schedules_creation_request_id"
            ],
            "properties": {
              "reward_schedules_creation_request_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Callback message to store the proposal id after the proposal is created. This message is ordered by the `CreatePoolCreationProposal` message after the `SubmitProposal` message, so it is executed right after the proposal is created in the same transaction. This message is executed by the governance admin contract itself and no-one else can execute this message.",
        "type": "object",
        "required": [
          "post_governance_proposal_creation_callback"
        ],
        "properties": {
          "post_governance_proposal_creation_callback": {
            "type": "object",
            "required": [
              "gov_proposal_type"
            ],
            "properties": {
              "gov_proposal_type": {
                "$ref": "#/definitions/GovAdminProposalRequestType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Callback message after the pool is created in the vault. This message is ordered by the `ResumeCreatePool` message after the `CreatePool` message, so it is executed right after the pool is created in the same transaction. This message is executed by the governance admin contract itself and no-one else can execute this message. We trigger the pool join functionality and store pool specific data in the Gov admin contract state in this message.",
        "type": "object",
        "required": [
          "resume_join_pool"
        ],
        "properties": {
          "resume_join_pool": {
            "type": "object",
            "required": [
              "pool_creation_request_id"
            ],
            "properties": {
              "pool_creation_request_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Asset": {
        "title": "Description - This enum describes a asset (native or CW20).",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "A token amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Information about an asset stored in a [`AssetInfo`] struct",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "This enum describes available Token types.",
        "oneOf": [
          {
            "description": "Non-native Token",
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native token",
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "BankMsg": {
        "description": "The message types of the bank module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "Sends native tokens from the contract to the given address.\n\nThis is translated to a [MsgSend](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/bank/v1beta1/tx.proto#L19-L28). `from_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "send"
            ],
            "properties": {
              "send": {
                "type": "object",
                "required": [
                  "amount",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "to_address": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will burn the given coins from the contract's account. There is no Cosmos SDK message that performs this, but it can be done by calling the bank keeper. Important if a contract controls significant token supply that must be retired.",
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CosmosMsg_for_Empty": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "bank"
            ],
            "properties": {
              "bank": {
                "$ref": "#/definitions/BankMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "$ref": "#/definitions/Empty"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "staking"
            ],
            "properties": {
              "staking": {
                "$ref": "#/definitions/StakingMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "distribution"
            ],
            "properties": {
              "distribution": {
                "$ref": "#/definitions/DistributionMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "A Stargate message encoded the same way as a protobuf [Any](https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/any.proto). This is the same structure as messages in `TxBody` from [ADR-020](https://github.com/cosmos/cosmos-sdk/blob/master/docs/architecture/adr-020-protobuf-transaction-encoding.md)",
            "type": "object",
            "required": [
              "stargate"
            ],
            "properties": {
              "stargate": {
                "type": "object",
                "required": [
                  "type_url",
                  "value"
                ],
                "properties": {
                  "type_url": {
                    "type": "string"
                  },
                  "value": {
                    "$ref": "#/definitions/Binary"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ibc"
            ],
            "properties": {
              "ibc": {
                "$ref": "#/definitions/IbcMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "wasm"
            ],
            "properties": {
              "wasm": {
                "$ref": "#/definitions/WasmMsg"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "gov"
            ],
            "properties": {
              "gov": {
                "$ref": "#/definitions/GovMsg"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "DistributionMsg": {
        "description": "The message types of the distribution module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgSetWithdrawAddress](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L29-L37). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "set_withdraw_address"
            ],
            "properties": {
              "set_withdraw_address": {
                "type": "object",
                "required": [
                  "address"
                ],
                "properties": {
                  "address": {
                    "description": "The `withdraw_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [[MsgWithdrawDelegatorReward](https://github.com/cosmos/cosmos-sdk/blob/v0.42.4/proto/cosmos/distribution/v1beta1/tx.proto#L42-L50). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "withdraw_delegator_reward"
            ],
            "properties": {
              "withdraw_delegator_reward": {
                "type": "object",
                "required": [
                  "validator"
                ],
                "properties": {
                  "validator": {
                    "description": "The `validator_address`",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Empty": {
        "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
        "type": "object"
      },
      "FeeInfo": {
        "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
        "type": "object",
        "required": [
          "protocol_fee_percent",
          "total_fee_bps"
        ],
        "properties": {
          "protocol_fee_percent": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "total_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "GovAdminProposalRequestType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "pool_creation_request"
            ],
            "properties": {
              "pool_creation_request": {
                "type": "object",
                "required": [
                  "request_id"
                ],
                "properties": {
                  "request_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "reward_schedules_creation_request"
            ],
            "properties": {
              "reward_schedules_creation_request": {
                "type": "object",
                "required": [
                  "request_id"
                ],
                "properties": {
                  "request_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovMsg": {
        "description": "This message type allows the contract interact with the [x/gov] module in order to cast votes.\n\n[x/gov]: https://github.com/cosmos/cosmos-sdk/tree/v0.45.12/x/gov\n\n## Examples\n\nCast a simple vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); use cosmwasm_std::{GovMsg, VoteOption};\n\n#[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::Vote { proposal_id: 4, vote: VoteOption::Yes, })) } ```\n\nCast a weighted vote:\n\n``` # use cosmwasm_std::{ #     HexBinary, #     Storage, Api, Querier, DepsMut, Deps, entry_point, Env, StdError, MessageInfo, #     Response, QueryResponse, # }; # type ExecuteMsg = (); # #[cfg(feature = \"cosmwasm_1_2\")] use cosmwasm_std::{Decimal, GovMsg, VoteOption, WeightedVoteOption};\n\n# #[cfg(feature = \"cosmwasm_1_2\")] #[entry_point] pub fn execute( deps: DepsMut, env: Env, info: MessageInfo, msg: ExecuteMsg, ) -> Result<Response, StdError> { // ... Ok(Response::new().add_message(GovMsg::VoteWeighted { proposal_id: 4, options: vec![ WeightedVoteOption { option: VoteOption::Yes, weight: Decimal::percent(65), }, WeightedVoteOption { option: VoteOption::Abstain, weight: Decimal::percent(35), }, ], })) } ```",
        "oneOf": [
          {
            "description": "This maps directly to [MsgVote](https://github.com/cosmos/cosmos-sdk/blob/v0.42.5/proto/cosmos/gov/v1beta1/tx.proto#L46-L56) in the Cosmos SDK with voter set to the contract address.",
            "type": "object",
            "required": [
              "vote"
            ],
            "properties": {
              "vote": {
                "type": "object",
                "required": [
                  "proposal_id",
                  "vote"
                ],
                "properties": {
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "vote": {
                    "description": "The vote option.\n\nThis should be called \"option\" for consistency with Cosmos SDK. Sorry for that. See <https://github.com/CosmWasm/cosmwasm/issues/1571>.",
                    "allOf": [
                      {
                        "$ref": "#/definitions/VoteOption"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GovernanceProposalDescription": {
        "type": "object",
        "required": [
          "metadata",
          "summary",
          "title"
        ],
        "properties": {
          "metadata": {
            "type": "string"
          },
          "summary": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "IbcMsg": {
        "description": "These are messages in the IBC lifecycle. Only usable by IBC-enabled contracts (contracts that directly speak the IBC protocol via 6 entry points)",
        "oneOf": [
          {
            "description": "Sends bank tokens owned by the contract to the given address on another chain. The channel must already be established between the ibctransfer module on this chain and a matching module on the remote chain. We cannot select the port_id, this is whatever the local chain has bound the ibctransfer module to.",
            "type": "object",
            "required": [
              "transfer"
            ],
            "properties": {
              "transfer": {
                "type": "object",
                "required": [
                  "amount",
                  "channel_id",
                  "timeout",
                  "to_address"
                ],
                "properties": {
                  "amount": {
                    "description": "packet data only supports one coin https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/ibc/applications/transfer/v1/transfer.proto#L11-L20",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Coin"
                      }
                    ]
                  },
                  "channel_id": {
                    "description": "existing channel to send the tokens over",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  },
                  "to_address": {
                    "description": "address on the remote chain to receive these tokens",
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sends an IBC packet with given data over the existing channel. Data should be encoded in a format defined by the channel version, and the module on the other side should know how to parse this.",
            "type": "object",
            "required": [
              "send_packet"
            ],
            "properties": {
              "send_packet": {
                "type": "object",
                "required": [
                  "channel_id",
                  "data",
                  "timeout"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  },
                  "data": {
                    "$ref": "#/definitions/Binary"
                  },
                  "timeout": {
                    "description": "when packet times out, measured on remote chain",
                    "allOf": [
                      {
                        "$ref": "#/definitions/IbcTimeout"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This will close an existing channel that is owned by this contract. Port is auto-assigned to the contract's IBC port",
            "type": "object",
            "required": [
              "close_channel"
            ],
            "properties": {
              "close_channel": {
                "type": "object",
                "required": [
                  "channel_id"
                ],
                "properties": {
                  "channel_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "IbcTimeout": {
        "description": "In IBC each package must set at least one type of timeout: the timestamp or the block height. Using this rather complex enum instead of two timeout fields we ensure that at least one timeout is set.",
        "type": "object",
        "properties": {
          "block": {
            "anyOf": [
              {
                "$ref": "#/definitions/IbcTimeoutBlock"
              },
              {
                "type": "null"
              }
            ]
          },
          "timestamp": {
            "anyOf": [
              {
                "$ref": "#/definitions/Timestamp"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "IbcTimeoutBlock": {
        "description": "IBCTimeoutHeight Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients. Ordering is (revision_number, timeout_height)",
        "type": "object",
        "required": [
          "height",
          "revision"
        ],
        "properties": {
          "height": {
            "description": "block height after which the packet times out. the height within the given revision",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "revision": {
            "description": "the version that the client is currently on (e.g. after resetting the chain this could increment 1 as height drops to 0)",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "NativeAssetPrecisionInfo": {
        "type": "object",
        "required": [
          "denom",
          "precision"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "precision": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "PoolCreationRequest": {
        "type": "object",
        "required": [
          "asset_info",
          "bootstrapping_liquidity_owner",
          "native_asset_precisions",
          "pool_type",
          "vault_addr"
        ],
        "properties": {
          "asset_info": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "bootstrapping_amount": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Asset"
            }
          },
          "bootstrapping_liquidity_owner": {
            "type": "string"
          },
          "fee_info": {
            "anyOf": [
              {
                "$ref": "#/definitions/FeeInfo"
              },
              {
                "type": "null"
              }
            ]
          },
          "init_params": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "native_asset_precisions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NativeAssetPrecisionInfo"
            }
          },
          "pool_type": {
            "$ref": "#/definitions/PoolType"
          },
          "reward_schedules": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/RewardScheduleCreationRequest"
            }
          },
          "vault_addr": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PoolType": {
        "description": "This enum describes the key for the different Pool types supported by Dexter",
        "oneOf": [
          {
            "description": "Stable pool type",
            "type": "object",
            "required": [
              "stable_swap"
            ],
            "properties": {
              "stable_swap": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Weighted pool type",
            "type": "object",
            "required": [
              "weighted"
            ],
            "properties": {
              "weighted": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pool type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RewardScheduleCreationRequest": {
        "type": "object",
        "required": [
          "amount",
          "asset",
          "end_block_time",
          "start_block_time",
          "title"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "asset": {
            "$ref": "#/definitions/AssetInfo"
          },
          "end_block_time": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "lp_token_addr": {
            "description": "This is null when it is being used within a new pool creation request This is not null when it is being used as a reward schedule creation request",
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "start_block_time": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StakingMsg": {
        "description": "The message types of the staking module.\n\nSee https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto",
        "oneOf": [
          {
            "description": "This is translated to a [MsgDelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L81-L90). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "delegate"
            ],
            "properties": {
              "delegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgUndelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L112-L121). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "undelegate"
            ],
            "properties": {
              "undelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "This is translated to a [MsgBeginRedelegate](https://github.com/cosmos/cosmos-sdk/blob/v0.40.0/proto/cosmos/staking/v1beta1/tx.proto#L95-L105). `delegator_address` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "redelegate"
            ],
            "properties": {
              "redelegate": {
                "type": "object",
                "required": [
                  "amount",
                  "dst_validator",
                  "src_validator"
                ],
                "properties": {
                  "amount": {
                    "$ref": "#/definitions/Coin"
                  },
                  "dst_validator": {
                    "type": "string"
                  },
                  "src_validator": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "VoteOption": {
        "type": "string",
        "enum": [
          "yes",
          "no",
          "abstain",
          "no_with_veto"
        ]
      },
      "WasmMsg": {
        "description": "The message types of the wasm module.\n\nSee https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto",
        "oneOf": [
          {
            "description": "Dispatches a call to another contract at a known address (with known ABI).\n\nThis is translated to a [MsgExecuteContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L68-L78). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "execute"
            ],
            "properties": {
              "execute": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "funds",
                  "msg"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "msg": {
                    "description": "msg is the json-encoded ExecuteMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Instantiates a new contracts from previously uploaded Wasm code.\n\nThe contract address is non-predictable. But it is guaranteed that when emitting the same Instantiate message multiple times, multiple instances on different addresses will be generated. See also Instantiate2.\n\nThis is translated to a [MsgInstantiateContract](https://github.com/CosmWasm/wasmd/blob/v0.29.2/proto/cosmwasm/wasm/v1/tx.proto#L53-L71). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "instantiate"
            ],
            "properties": {
              "instantiate": {
                "type": "object",
                "required": [
                  "code_id",
                  "funds",
                  "label",
                  "msg"
                ],
                "properties": {
                  "admin": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "code_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "funds": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Coin"
                    }
                  },
                  "label": {
                    "description": "A human-readable label for the contract.\n\nValid values should: - not be empty - not be bigger than 128 bytes (or some chain-specific limit) - not start / end with whitespace",
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the JSON-encoded InstantiateMsg struct (as raw Binary)",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Migrates a given contracts to use new wasm code. Passes a MigrateMsg to allow us to customize behavior.\n\nOnly the contract admin (as defined in wasmd), if any, is able to make this call.\n\nThis is translated to a [MsgMigrateContract](https://github.com/CosmWasm/wasmd/blob/v0.14.0/x/wasm/internal/types/tx.proto#L86-L96). `sender` is automatically filled with the current contract's address.",
            "type": "object",
            "required": [
              "migrate"
            ],
            "properties": {
              "migrate": {
                "type": "object",
                "required": [
                  "contract_addr",
                  "msg",
                  "new_code_id"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  },
                  "msg": {
                    "description": "msg is the json-encoded MigrateMsg struct that will be passed to the new code",
                    "allOf": [
                      {
                        "$ref": "#/definitions/Binary"
                      }
                    ]
                  },
                  "new_code_id": {
                    "description": "the code_id of the new logic to place in the given contract",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Sets a new admin (for migrate) on the given contract. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "update_admin"
            ],
            "properties": {
              "update_admin": {
                "type": "object",
                "required": [
                  "admin",
                  "contract_addr"
                ],
                "properties": {
                  "admin": {
                    "type": "string"
                  },
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Clears the admin on the given contract, so no more migration possible. Fails if this contract is not currently admin of the target contract.",
            "type": "object",
            "required": [
              "clear_admin"
            ],
            "properties": {
              "clear_admin": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Returns the state of the pool creation request",
        "type": "object",
        "required": [
          "pool_creation_request"
        ],
        "properties": {
          "pool_creation_request": {
            "type": "object",
            "required": [
              "pool_creation_request_id"
            ],
            "properties": {
              "pool_creation_request_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the state of the reward schedule creation request",
        "type": "object",
        "required": [
          "reward_schedule_request"
        ],
        "properties": {
          "reward_schedule_request": {
            "type": "object",
            "required": [
              "reward_schedule_request_id"
            ],
            "properties": {
              "reward_schedule_request_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "funds_for_pool_creation"
        ],
        "properties": {
          "funds_for_pool_creation": {
            "type": "object",
            "required": [
              "request"
            ],
            "properties": {
              "request": {
                "$ref": "#/definitions/PoolCreationRequest"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "funds_for_reward_schedule_creation"
        ],
        "properties": {
          "funds_for_reward_schedule_creation": {
            "type": "object",
            "required": [
              "requests"
            ],
            "properties": {
              "requests": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/RewardScheduleCreationRequest"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the refundable funds for the user. It provides total refund and also a breakdown of the refundable funds so that the user can understand the reason for the refund and the calculation involved in the refund.",
        "type": "object",
        "required": [
          "refundable_funds"
        ],
        "properties": {
          "refundable_funds": {
            "type": "object",
            "required": [
              "request_type"
            ],
            "properties": {
              "request_type": {
                "$ref": "#/definitions/GovAdminProposalRequestType"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Asset": {
        "title": "Description - This enum describes a asset (native or CW20).",
        "type": "object",
        "required": [
          "amount",
          "info"
        ],
        "properties": {
          "amount": {
            "description": "A token amount",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "info": {
            "description": "Information about an asset stored in a [`AssetInfo`] struct",
            "allOf": [
              {
                "$ref": "#/definitions/AssetInfo"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssetInfo": {
        "description": "This enum describes available Token types.",
        "oneOf": [
          {
            "description": "Non-native Token",
            "type": "object",
            "required": [
              "token"
            ],
            "properties": {
              "token": {
                "type": "object",
                "required": [
                  "contract_addr"
                ],
                "properties": {
                  "contract_addr": {
                    "$ref": "#/definitions/Addr"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Native token",
            "type": "object",
            "required": [
              "native_token"
            ],
            "properties": {
              "native_token": {
                "type": "object",
                "required": [
                  "denom"
                ],
                "properties": {
                  "denom": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "FeeInfo": {
        "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
        "type": "object",
        "required": [
          "protocol_fee_percent",
          "total_fee_bps"
        ],
        "properties": {
          "protocol_fee_percent": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "total_fee_bps": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "GovAdminProposalRequestType": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "pool_creation_request"
            ],
            "properties": {
              "pool_creation_request": {
                "type": "object",
                "required": [
                  "request_id"
                ],
                "properties": {
                  "request_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "reward_schedules_creation_request"
            ],
            "properties": {
              "reward_schedules_creation_request": {
                "type": "object",
                "required": [
                  "request_id"
                ],
                "properties": {
                  "request_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "NativeAssetPrecisionInfo": {
        "type": "object",
        "required": [
          "denom",
          "precision"
        ],
        "properties": {
          "denom": {
            "type": "string"
          },
          "precision": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "PoolCreationRequest": {
        "type": "object",
        "required": [
          "asset_info",
          "bootstrapping_liquidity_owner",
          "native_asset_precisions",
          "pool_type",
          "vault_addr"
        ],
        "properties": {
          "asset_info": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AssetInfo"
            }
          },
          "bootstrapping_amount": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Asset"
            }
          },
          "bootstrapping_liquidity_owner": {
            "type": "string"
          },
          "fee_info": {
            "anyOf": [
              {
                "$ref": "#/definitions/FeeInfo"
              },
              {
                "type": "null"
              }
            ]
          },
          "init_params": {
            "anyOf": [
              {
                "$ref": "#/definitions/Binary"
              },
              {
                "type": "null"
              }
            ]
          },
          "native_asset_precisions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/NativeAssetPrecisionInfo"
            }
          },
          "pool_type": {
            "$ref": "#/definitions/PoolType"
          },
          "reward_schedules": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/RewardScheduleCreationRequest"
            }
          },
          "vault_addr": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PoolType": {
        "description": "This enum describes the key for the different Pool types supported by Dexter",
        "oneOf": [
          {
            "description": "Stable pool type",
            "type": "object",
            "required": [
              "stable_swap"
            ],
            "properties": {
              "stable_swap": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Weighted pool type",
            "type": "object",
            "required": [
              "weighted"
            ],
            "properties": {
              "weighted": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Custom pool type",
            "type": "object",
            "required": [
              "custom"
            ],
            "properties": {
              "custom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "RewardScheduleCreationRequest": {
        "type": "object",
        "required": [
          "amount",
          "asset",
          "end_block_time",
          "start_block_time",
          "title"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "asset": {
            "$ref": "#/definitions/AssetInfo"
          },
          "end_block_time": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "lp_token_addr": {
            "description": "This is null when it is being used within a new pool creation request This is not null when it is being used as a reward schedule creation request",
            "anyOf": [
              {
                "$ref": "#/definitions/Addr"
              },
              {
                "type": "null"
              }
            ]
          },
          "start_block_time": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "title": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "funds_for_pool_creation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserTotalDeposit",
      "type": "object",
      "required": [
        "deposit_breakdown",
        "total_deposit"
      ],
      "properties": {
        "deposit_breakdown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeposit"
          }
        },
        "total_deposit": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FundsCategory": {
          "type": "string",
          "enum": [
            "pool_creation_fee",
            "proposal_deposit",
            "pool_bootstrapping_amount",
            "reward_schedule_amount"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserDeposit": {
          "type": "object",
          "required": [
            "assets",
            "category"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "category": {
              "$ref": "#/definitions/FundsCategory"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "funds_for_reward_schedule_creation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserTotalDeposit",
      "type": "object",
      "required": [
        "deposit_breakdown",
        "total_deposit"
      ],
      "properties": {
        "deposit_breakdown": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeposit"
          }
        },
        "total_deposit": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FundsCategory": {
          "type": "string",
          "enum": [
            "pool_creation_fee",
            "proposal_deposit",
            "pool_bootstrapping_amount",
            "reward_schedule_amount"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserDeposit": {
          "type": "object",
          "required": [
            "assets",
            "category"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "category": {
              "$ref": "#/definitions/FundsCategory"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "pool_creation_request": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PoolCreateRequestContextData",
      "type": "object",
      "required": [
        "pool_creation_request",
        "request_sender",
        "status",
        "total_funds_acquired_from_user",
        "user_deposits_detailed"
      ],
      "properties": {
        "pool_creation_request": {
          "$ref": "#/definitions/PoolCreationRequest"
        },
        "request_sender": {
          "$ref": "#/definitions/Addr"
        },
        "status": {
          "$ref": "#/definitions/PoolCreationRequestStatus"
        },
        "total_funds_acquired_from_user": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "user_deposits_detailed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeposit"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "FeeInfo": {
          "title": "Description - This struct describes the Fee configuration supported by a particular pool type.",
          "type": "object",
          "required": [
            "protocol_fee_percent",
            "total_fee_bps"
          ],
          "properties": {
            "protocol_fee_percent": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            },
            "total_fee_bps": {
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "FundsCategory": {
          "type": "string",
          "enum": [
            "pool_creation_fee",
            "proposal_deposit",
            "pool_bootstrapping_amount",
            "reward_schedule_amount"
          ]
        },
        "NativeAssetPrecisionInfo": {
          "type": "object",
          "required": [
            "denom",
            "precision"
          ],
          "properties": {
            "denom": {
              "type": "string"
            },
            "precision": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "PoolCreationRequest": {
          "type": "object",
          "required": [
            "asset_info",
            "bootstrapping_liquidity_owner",
            "native_asset_precisions",
            "pool_type",
            "vault_addr"
          ],
          "properties": {
            "asset_info": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            },
            "bootstrapping_amount": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "bootstrapping_liquidity_owner": {
              "type": "string"
            },
            "fee_info": {
              "anyOf": [
                {
                  "$ref": "#/definitions/FeeInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "init_params": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Binary"
                },
                {
                  "type": "null"
                }
              ]
            },
            "native_asset_precisions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NativeAssetPrecisionInfo"
              }
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            },
            "reward_schedules": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/RewardScheduleCreationRequest"
              }
            },
            "vault_addr": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "PoolCreationRequestStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "pending_proposal_creation"
              ]
            },
            {
              "type": "object",
              "required": [
                "proposal_created"
              ],
              "properties": {
                "proposal_created": {
                  "type": "object",
                  "required": [
                    "proposal_id"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "pool_created"
              ],
              "properties": {
                "pool_created": {
                  "type": "object",
                  "required": [
                    "pool_id",
                    "proposal_id"
                  ],
                  "properties": {
                    "pool_id": {
                      "$ref": "#/definitions/Uint128"
                    },
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "request_failed_and_refunded"
              ],
              "properties": {
                "request_failed_and_refunded": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "refund_block_height"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "refund_block_height": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "request_successful_and_deposit_refunded"
              ],
              "properties": {
                "request_successful_and_deposit_refunded": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "refund_block_height"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "refund_block_height": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolType": {
          "description": "This enum describes the key for the different Pool types supported by Dexter",
          "oneOf": [
            {
              "description": "Stable pool type",
              "type": "object",
              "required": [
                "stable_swap"
              ],
              "properties": {
                "stable_swap": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Weighted pool type",
              "type": "object",
              "required": [
                "weighted"
              ],
              "properties": {
                "weighted": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Custom pool type",
              "type": "object",
              "required": [
                "custom"
              ],
              "properties": {
                "custom": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "RewardScheduleCreationRequest": {
          "type": "object",
          "required": [
            "amount",
            "asset",
            "end_block_time",
            "start_block_time",
            "title"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "end_block_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lp_token_addr": {
              "description": "This is null when it is being used within a new pool creation request This is not null when it is being used as a reward schedule creation request",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start_block_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserDeposit": {
          "type": "object",
          "required": [
            "assets",
            "category"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "category": {
              "$ref": "#/definitions/FundsCategory"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "refundable_funds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RefundResponse",
      "type": "object",
      "required": [
        "detailed_refund_amount",
        "refund_amount",
        "refund_reason",
        "refund_receiver"
      ],
      "properties": {
        "detailed_refund_amount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeposit"
          }
        },
        "refund_amount": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "refund_reason": {
          "$ref": "#/definitions/RefundReason"
        },
        "refund_receiver": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FundsCategory": {
          "type": "string",
          "enum": [
            "pool_creation_fee",
            "proposal_deposit",
            "pool_bootstrapping_amount",
            "reward_schedule_amount"
          ]
        },
        "RefundReason": {
          "type": "string",
          "enum": [
            "proposal_passed_deposit_refund",
            "proposal_rejected_full_refund",
            "proposal_vetoed_refund_except_deposit",
            "proposal_failed_full_refund"
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserDeposit": {
          "type": "object",
          "required": [
            "assets",
            "category"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "category": {
              "$ref": "#/definitions/FundsCategory"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "reward_schedule_request": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RewardScheduleCreationRequestsState",
      "type": "object",
      "required": [
        "multistaking_contract_addr",
        "request_sender",
        "reward_schedule_creation_requests",
        "status",
        "total_funds_acquired_from_user",
        "user_deposits_detailed"
      ],
      "properties": {
        "multistaking_contract_addr": {
          "$ref": "#/definitions/Addr"
        },
        "request_sender": {
          "$ref": "#/definitions/Addr"
        },
        "reward_schedule_creation_requests": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RewardScheduleCreationRequest"
          }
        },
        "status": {
          "$ref": "#/definitions/RewardSchedulesCreationRequestStatus"
        },
        "total_funds_acquired_from_user": {
          "description": "this field is only set if the request is linked to a governance proposal",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          }
        },
        "user_deposits_detailed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDeposit"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Asset": {
          "title": "Description - This enum describes a asset (native or CW20).",
          "type": "object",
          "required": [
            "amount",
            "info"
          ],
          "properties": {
            "amount": {
              "description": "A token amount",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "info": {
              "description": "Information about an asset stored in a [`AssetInfo`] struct",
              "allOf": [
                {
                  "$ref": "#/definitions/AssetInfo"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "AssetInfo": {
          "description": "This enum describes available Token types.",
          "oneOf": [
            {
              "description": "Non-native Token",
              "type": "object",
              "required": [
                "token"
              ],
              "properties": {
                "token": {
                  "type": "object",
                  "required": [
                    "contract_addr"
                  ],
                  "properties": {
                    "contract_addr": {
                      "$ref": "#/definitions/Addr"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Native token",
              "type": "object",
              "required": [
                "native_token"
              ],
              "properties": {
                "native_token": {
                  "type": "object",
                  "required": [
                    "denom"
                  ],
                  "properties": {
                    "denom": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FundsCategory": {
          "type": "string",
          "enum": [
            "pool_creation_fee",
            "proposal_deposit",
            "pool_bootstrapping_amount",
            "reward_schedule_amount"
          ]
        },
        "RewardScheduleCreationRequest": {
          "type": "object",
          "required": [
            "amount",
            "asset",
            "end_block_time",
            "start_block_time",
            "title"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "end_block_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "lp_token_addr": {
              "description": "This is null when it is being used within a new pool creation request This is not null when it is being used as a reward schedule creation request",
              "anyOf": [
                {
                  "$ref": "#/definitions/Addr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "start_block_time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "title": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "RewardSchedulesCreationRequestStatus": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "pending_proposal_creation",
                "non_proposal_reward_schedule"
              ]
            },
            {
              "type": "object",
              "required": [
                "proposal_created"
              ],
              "properties": {
                "proposal_created": {
                  "type": "object",
                  "required": [
                    "proposal_id"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "reward_schedules_created"
              ],
              "properties": {
                "reward_schedules_created": {
                  "type": "object",
                  "properties": {
                    "proposal_id": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "request_failed_and_refunded"
              ],
              "properties": {
                "request_failed_and_refunded": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "refund_block_height"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "refund_block_height": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "request_successful_and_deposit_refunded"
              ],
              "properties": {
                "request_successful_and_deposit_refunded": {
                  "type": "object",
                  "required": [
                    "proposal_id",
                    "refund_block_height"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    "refund_block_height": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "UserDeposit": {
          "type": "object",
          "required": [
            "assets",
            "category"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "category": {
              "$ref": "#/definitions/FundsCategory"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
