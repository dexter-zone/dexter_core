{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "description": "This struct describes the query messages of the contract.",
  "oneOf": [
    {
      "title": "Description - Returns the current configuration of the pool.",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns information about the Fees settings in a [`FeeResponse`] object.",
      "type": "object",
      "required": [
        "fee_params"
      ],
      "properties": {
        "fee_params": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns Pool ID which is of type [`Uint128`]",
      "type": "object",
      "required": [
        "pool_id"
      ],
      "properties": {
        "pool_id": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns [`AfterJoinResponse`] type which contains - `return_assets` info, number of LP shares to be minted, the `response` of type [`ResponseType`]",
      "description": "and `fee` of type [`Option<Asset>`] which is the fee to be charged",
      "type": "object",
      "required": [
        "on_join_pool"
      ],
      "properties": {
        "on_join_pool": {
          "type": "object",
          "properties": {
            "assets_in": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "mint_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "slippage_tolerance": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns [`AfterExitResponse`] type which contains - `assets_out` info, number of LP shares to be burnt, the `response` of type [`ResponseType`]",
      "description": "and `fee` of type [`Option<Asset>`] which is the fee to be charged",
      "type": "object",
      "required": [
        "on_exit_pool"
      ],
      "properties": {
        "on_exit_pool": {
          "type": "object",
          "properties": {
            "assets_out": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Asset"
              }
            },
            "burn_amount": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns [`SwapResponse`] type which contains - `trade_params` info, the `response` of type [`ResponseType`] and `fee` of type [`Option<Asset>`] which is the fee to be charged",
      "type": "object",
      "required": [
        "on_swap"
      ],
      "properties": {
        "on_swap": {
          "type": "object",
          "required": [
            "amount",
            "ask_asset",
            "offer_asset",
            "swap_type"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "ask_asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "belief_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "swap_type": {
              "$ref": "#/definitions/SwapType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns information about the cumulative price of the asset in a [`CumulativePriceResponse`] object.",
      "type": "object",
      "required": [
        "cumulative_price"
      ],
      "properties": {
        "cumulative_price": {
          "type": "object",
          "required": [
            "ask_asset",
            "offer_asset"
          ],
          "properties": {
            "ask_asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "offer_asset": {
              "$ref": "#/definitions/AssetInfo"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "title": "Description - Returns information about the cumulative prices in a [`CumulativePricesResponse`] object.",
      "type": "object",
      "required": [
        "cumulative_prices"
      ],
      "properties": {
        "cumulative_prices": {
          "type": "object"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Asset": {
      "title": "Description - This enum describes a asset (native or CW20).",
      "type": "object",
      "required": [
        "amount",
        "info"
      ],
      "properties": {
        "amount": {
          "description": "A token amount",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "info": {
          "description": "Information about an asset stored in a [`AssetInfo`] struct",
          "allOf": [
            {
              "$ref": "#/definitions/AssetInfo"
            }
          ]
        }
      }
    },
    "AssetInfo": {
      "description": "This enum describes available Token types.",
      "oneOf": [
        {
          "description": "Non-native Token",
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Native token",
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SwapType": {
      "description": "This enum describes available Swap types. ## Available swap types ``` ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "give_in"
          ],
          "properties": {
            "give_in": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "give_out"
          ],
          "properties": {
            "give_out": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Custom swap type",
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
